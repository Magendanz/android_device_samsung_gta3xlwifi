#universal7885
import /init.recovery.${ro.hardware}.rc

on early-init
    # Set the security context of /postinstall if present.
    restorecon /postinstall

    start ueventd
    start healthd

on init
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    mkdir /dev/usb-ffs 0770 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell
    mount configfs none /sys/kernel/config
    mkdir /sys/kernel/config/usb_gadget/g1
    mkdir /sys/kernel/config/usb_gadget/g1/strings/0x409
    mkdir /sys/kernel/config/usb_gadget/g1/configs/c.1
    mkdir /sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409
    mkdir /sys/kernel/config/usb_gadget/g1/functions/ffs.adb 0770 shell shell
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000
## MDFPP START
    export LD_LIBRARY_PATH /system/vendor/lib64:/system/lib64:/system/vendor/lib:/system/lib
## MDFPP END

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /.system
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mkdir /preload
    mkdir /custom
    mkdir /sbfs
    mkdir /efs
    mkdir /cpefs
    mkdir /tmp
    mkdir /carrier
    mkdir /persdata
    mkdir /firmware
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

    emmc_quickverify

#to cut charging battery path
    write /sys/class/power_supply/battery/siop_level 0

on fs
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer "SAMSUNG"
    write /sys/kernel/config/usb_gadget/g1/strings/0x409/product "SAMSUNG_Android"
    write /sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "Conf 1"
    write /sys/kernel/config/usb_gadget/g1/configs/c.1/MaxPower 0x1f4
    symlink /sys/kernel/config/usb_gadget/g1/functions/ffs.adb /sys/kernel/config/usb_gadget/g1/configs/c.1/ffs.adb
    chown system system /sys/class/backlight/panel/brightness
    chmod 0666 /sys/class/backlight/panel/brightness
    write /sys/class/backlight/panel/brightness 12000
    chmod 0000 /sys/class/backlight/panel/brightness

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_system_props_action
    load_system_props

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_system_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

on property:sys.usb.ffs.ready=1
    write /sys/class/android_usb/android0/enable 0
    write /sys/kernel/config/usb_gadget/g1/idVendor 0x04E8
    write /sys/kernel/config/usb_gadget/g1/idProduct 0x6860
    write /sys/class/android_usb/android0/functions adb
    write /sys/kernel/config/usb_gadget/g1/UDC "13600000.dwc3"
    write /sys/class/android_usb/android0/enable 1

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

on property:sys.param_partition=*
    symlink ${sys.param_partition} /dev/block/param
    chown root system /dev/block/param
    chmod 0666 /dev/block/param

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service healthd /sbin/healthd -r
    critical
    seclabel u:r:healthd:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

#DMV
##mobicore daemon - S.LSI case 
service static_mc /sbin/mcDriverDaemon_static -p /mcRegistry -r /mcRegistry/ffffffffd0000000000000000000000a.tlbin
    seclabel u:r:mobicoredaemon:s0
    class load_dmv

##qseecomfs daemon - Qualcomm case 
service static_qsee /sbin/qseecomfsd
    seclabel u:r:qseecomd:s0
    class load_dmv

on property:security.dmv=start
   class_start load_dmv

on property:security.dmv=stop
   class_reset load_dmv
#

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
service kap_enable /sbin/knox_changer -e
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

service kap_disable /sbin/knox_changer -d
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

service afw_enable /sbin/knox_changer -f
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

service afw_disable /sbin/knox_changer -s
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

# UCS
service ucs_enable /sbin/knox_changer -u
    class main
    seclabel u:r:kapd:s0
    disabled
    oneshot

service ucs_disable /sbin/knox_changer -v
    class main
    seclabel u:r:kapd:s0
    disabled
    oneshot

service ucs_reset /sbin/knox_changer -w
    class main
    seclabel u:r:kapd:s0
    disabled
    oneshot

# Allow the Knox Active Protection mode to be set from recovery
on property:security.knox_kap_mode=true
    start kap_enable
on property:security.knox_kap_mode=false
    start kap_disable

# Allow the AFW mode to be set from recovery
on property:security.knox_afw_mode=true
    start afw_enable
on property:security.knox_afw_mode=false
    start afw_disable

# UCS
on property:security.knox_ucs_mode=true
    start ucs_enable
on property:security.knox_ucs_mode=false
    start ucs_disable
on property:security.knox_ucs_mode=reset
    start ucs_reset

